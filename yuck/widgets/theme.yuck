(deflisten presetthemes :initial "[]" "./scripts/themectl.py get_themes")
(deflisten presetfonts :initial "[]" "./scripts/themectl.py get_fonts")

(defwidget themectlwid [] 
  (box 
    :class "widget transparent"
    :orientation "v"
    :space-evenly false 
    :spacing 10
    (box 
      :orientation "v" 
      :space-evenly false
      :halign "start"
      (label 
        :xalign 0
        :markup "<span size='large'>Theme</span>")
      (label 
        :xalign 0
        :markup "<span size='small'>customize the appearance of your desktop</span>")
      (box 
        :hexpand true 
        :height 2
        :style "background-color: ${theme.muted};"))
    (box
      :orientation "h"
      :space-evenly false
      (label 
        :hexpand true
        :xalign 0
        :markup "Saved theme: ") 
      (box
        :class "widget"
        :style "margin-right: 0px;"
        (combo-box-text
          :items presetthemes
          :onchange "./scripts/themectl.py reset {}")))
    (box
      :orientation "h"
      :space-evenly false
      (label 
        :hexpand true
        :xalign 0
        :markup "Font: ") 
      (box
        :class "widget"
        :style "margin-right: 0px;"
        (combo-box-text
          :items presetfonts
          :onchange "./scripts/themectl.py set_font {}")))
    (themecolors)
    (box 
      :orientation "h"
      (button 
        :class "widget"
        :onclick "./scripts/themectl.py save_theme"
        (label 
          :markup "Save"))
      (button 
        :class "widget"
        :onclick "./scripts/themectl.py apply"
        (label 
          :markup "Apply"))
      (button 
        :class "widget"
        :onclick "${EWW_CMD} close themectl"
        (label 
          :markup "Ok")))))

(defwidget themecolors [] 
  (box 
    :orientation "v"
    :space-evenly false 
    (label 
      :xalign 0
      :markup "Colors")
    (box 
      :orientation "h"
      :class "widget"
      :style "margin-left: 0px; margin-right: 0px;"
      (box 
        :orientation "v"
        :spacing 10
        (themecolorpick :type "base") 
        (themecolorpick :type "surface") 
        (themecolorpick :type "overlay")) 
      (box 
        :orientation "v"
        :spacing 10
        (themecolorpick :type "muted") 
        (themecolorpick :type "subtle") 
        (themecolorpick :type "text")) 
      (box 
        :orientation "v"
        :spacing 10
        (themecolorpick :type "highlight") 
        (themecolorpick :type "accent") 
        (themecolorpick :type "accent2"))))) 

(defwidget themecolorpick [type]
  (box 
    :orientation "h"
    :space-evenly false 
    :spacing 10
    (color-button 
      :class "colorbox"
      :style "background-color: ${theme[type]};"
      :use-alpha false 
      :onchange "./scripts/themectl.py set_col ${type} '{}'")
    (label 
      :markup {type})))
    
