(deflisten presetthemes :initial "[]" "./scripts/colormap.py get_themes")
(deflisten presetcolorkeys :initial "[]" "./scripts/colormap.py get_keys")
(defvar colorjson '{"key": "", "val": "?", "hex": "#ffffff"}')

(defwidget themectlwid [] 
  (box 
    :class "widget transparent"
    :orientation "v"
    :space-evenly false 
    :spacing 10
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Theme file</span>")
    (label 
      :xalign 0
      :wrap true
      :markup "Selects a Base16 file from <span background='${theme.overlay}'>./themes/</span> and applies the colors from that file.")
    (box
      :class "widget"
      :style "margin: 0px;"
      :halign "start"
      (combo-box-text
        :items presetthemes
        :onchange "./bin/set_theme.sh {}"))
    (themecolors)))

(defwidget themecolors [] 
  (box 
    :orientation "v"
    :space-evenly false 
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Colors</span>")
    (box 
      :orientation "h"
      :space-evenly false 
      (box 
        :orientation "v"
        :hexpand true
        (box
          :class "widget"
          :style "margin-left: 0px;"
          (combo-box-text 
            :items {presetcolorkeys}
            :onchange "./scripts/colormap.py update {}"))
        (box
          :class "widget"
          :style "margin-left: 0px;"
          (input 
            :value {colorjson.val}
            :onaccept "./scripts/colormap.py set ${colorjson.key} '{}'")))
      (box
        :width 120 
        :class "colorbox"
        :style "background-color: ${colorjson.hex};"))))

(defwidget themecolorpick [type]
  (box 
    :orientation "h"
    :space-evenly false 
    :spacing 10
    (color-button 
      :class "colorbox"
      :style "background-color: ${theme[type]};"
      :use-alpha false 
      :onchange "./scripts/themectl.py set_col ${type} '{}'")
    (label 
      :markup {type})))
    
