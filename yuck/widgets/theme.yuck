(deflisten presetthemes :initial "[]" "./scripts/colormap.py get_themes")
(deflisten presetcolorkeys :initial "[]" "./scripts/colormap.py get_keys")
(deflisten colorjson :initial '{"key": "", "val": "?", "hex": "#ffffff"}' "./scripts/colormap.py update base")
(deflisten wallpaperpath "./bin/wallset.sh get")

(defvar selectedthememenu 0)

(defwidget themectlwid []
  (box 
    :orientation "v"
    :space-evenly false
    (box 
      :orientation "h"
      :space-evenly false 
      :class "themeheader"
      :spacing 10
      (image 
        :path "./assets/icons/menu.svg"
        :image-width 25)
      (label 
        :markup "<span size='large' weight='bold'>Options</span>"))
    (box 
      :orientation "h"
      :space-evenly false
      :vexpand true
      (box 
        :width 230
        :orientation "v"
        :space-evenly false 
        :class "leftbar"
        (box
          :orientation "v"
          :class "widget"
          :spacing 15
          (sidebarselect 
            :icon "./assets/icons/tpen"
            :name "Theme"
            :pos 0)
          (sidebarselect 
            :icon "./assets/icons/layout"
            :name "Layout"
            :pos 1)
          (sidebarselect 
            :icon "./assets/icons/cpu"
            :name "Performance"
            :pos 2))
        (box 
          :vexpand true)
        (box
          :class "widget"
          (sidebarselect 
            :icon "./assets/icons/link"
            :name "Credits"
            :pos 3)))
      (stack 
        :hexpand true
        :transition "slideright"
        :selected selectedthememenu
        :same-size true
        (themewid)
        (layoutwid) 
        (performancewid)
        (creditswid)))))

(defwidget sidebarselect [icon name pos]
  (button
    :class {pos == selectedthememenu ? "interactive hard" : "widget"}
    :onclick "${EWW_CMD} update selectedthememenu=${pos}"
    :style "padding: 10px;"
    (box 
      :orientation "h"
      :spacing 10
      :space-evenly false 
      (image 
        :path "${icon}${pos == selectedthememenu ? 'b' : ''}.svg"
        :image-width 20) 
      (label 
        :markup {pos == selectedthememenu ? "<span weight='bold'>${name}</span>" : "<span foreground='${theme.subtle}'>${name}</span>"}))))


(defwidget headcont []
  (box 
    :class "themebodymin"
    :orientation "v"
    :space-evenly false 
    :hexpand true
    (box 
      :orientation "h"
      :space-evenly false 
      :spacing 10
      :style "padding: 5px 15px;"
      (children :nth 0))
    (box
      :class "themesubmin"
      (children :nth 1)))) 
  
(defwidget tailcont []
  (box 
    :class "themebodymin"
    :orientation "v"
    :space-evenly false 
    :hexpand true
    (box
      :class "themesubmin"
      (children :nth 0)) 
    (box 
      :orientation "h"
      :space-evenly false 
      :hexpand true
      :style "padding: 5px 15px;"
      (children :nth 1)))) 
