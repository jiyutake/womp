(deflisten presetthemes :initial "[]" "./scripts/colormap.py get_themes")
(deflisten presetcolorkeys :initial "[]" "./scripts/colormap.py get_keys")
(deflisten colorjson :initial '{"key": "", "val": "?", "hex": "#ffffff"}' "./scripts/colormap.py update base")
(deflisten wallpaperpath "./bin/wallset.sh get")

(defvar selectedthememenu 0)

(defwidget themectlwid []
  (box 
    :orientation "v"
    :space-evenly false
    (box 
      :orientation "h"
      :space-evenly false 
      :class "themeheader"
      :spacing 10
      (image 
        :path "./assets/icons/menu.svg"
        :image-width 25)
      (label 
        :markup "<span size='large' weight='bold'>Options</span>"))
    (box 
      :orientation "h"
      :space-evenly false
      :vexpand true
      (box 
        :width 200
        :orientation "v"
        :space-evenly false 
        :class "leftbar"
        :spacing 15
        (sidebarselect 
          :icon "./assets/icons/tpen"
          :name "Theme"
          :pos 0)
        (sidebarselect 
          :icon "./assets/icons/layout"
          :name "Layout"
          :pos 1)
        (sidebarselect 
          :icon "./assets/icons/cpu"
          :name "Performance"
          :pos 2)
        (box 
          :vexpand true)
        (sidebarselect 
          :icon "./assets/icons/link"
          :name "Credits"
          :pos 3))
      (scroll
        :hscroll false 
        :vscroll true 
        :vexpand true
        :hexpand true
        (stack 
          :hexpand true
          :transition "slideright"
          :selected selectedthememenu
          :same-size true
          (themewid)
          (box) 
          (performancewid)
          (box))))))

(defwidget sidebarselect [icon name pos]
  (button
    :onclick "${EWW_CMD} update selectedthememenu=${pos}"
    (box 
      :orientation "h"
      :spacing 10
      :space-evenly false 
      (image 
        :path "${icon}${pos == selectedthememenu ? 'b' : ''}.svg"
        :image-width 20) 
      (label 
        :markup {pos == selectedthememenu ? "<span weight='bold'>${name}</span>" : name}))))

(defwidget performancewid []
  (box 
    :class "widget transparent"
    :orientation "v"
    :space-evenly false 
    :spacing 10 
    :hexpand true
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Performance</span>")
    (label 
      :xalign 0
      :wrap true
      :markup "Disables features that might cause issues and check the system information.")
    (headcont 
      :h1 "<b>Variables</b>"
      (box 
        :orientation "v"
        :spacing 15

        (box 
          :orientation "h"
          :space-evenly false
          (label 
            :hexpand true
            :xalign 0
            :text "Compositor")
          (button
            :halign "end"
            :valign "center"
            :class "checkb ${!picomrunning ? 'inactive' : ''}"
            :onclick "./bin/performancevar.sh set compositor ${!picomrunning} && ./bin/womp.sh compositor toggle"))

        (box 
          :orientation "h"
          :space-evenly false
          (label 
            :hexpand true
            :xalign 0
            :text "Record player")
          (button
            :halign "end"
            :valign "center"
            :class "checkb ${!recordplayerenable ? 'inactive' : ''}"
            :onclick "./bin/performancevar.sh set record_player ${!recordplayerenable} && ${EWW_CMD} update recordplayerenable=${!recordplayerenable}"))

        (box 
          :orientation "h"
          :space-evenly false
          (label 
            :hexpand true
            :xalign 0
            :text "Battery wave animation")
          (button
            :halign "end"
            :valign "center"
            :class "checkb ${!batanim ? 'inactive' : ''}"
            :onclick "./bin/performancevar.sh set battery_anim ${!batanim} && ${EWW_CMD} update batanim=${!batanim}"))

        (box 
          :orientation "h"
          :space-evenly false
          (label 
            :hexpand true
            :xalign 0
            :markup "Lyrics <span foreground='${theme.muted}'>(requires picom)</span>")
          (button
            :halign "end"
            :valign "center"
            :class "checkb ${!lyricsenable ? 'inactive' : ''}"
            :onclick "./bin/performancevar.sh set lyrics ${!lyricsenable} && ${EWW_CMD} update lyricsenable=${!lyricsenable}"))))))

(defwidget headcont [h1]
  (box 
    :class "themebodymin"
    :orientation "v"
    :space-evenly false 
    :hexpand true
    (box 
      :orientation "h"
      :space-evenly false 
      :class "themeheadmin"
      :spacing 10
      (image 
        :path "./assets/icons/menu.svg"
        :image-width 20)
      (label 
        :markup h1))
    (box
      :style "padding: 10px;"
      (children)))) 
  

(defwidget themewid [] 
  (box 
    :class "widget transparent"
    :orientation "v"
    :space-evenly false 
    :spacing 10
    :hexpand true
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Theme file</span>")
    (label 
      :xalign 0
      :wrap true
      :markup "Selects a Base16 file from <span background='${theme.overlay}'>./themes/</span> and applies the colors from that file.")
    (combobox
      :text {theme.name}
      :items {presetthemes}
      :onchange "./bin/set_theme.sh {}")
    (wallwidget)
    (themecolors)))

(defwidget wallwidget []
  (box 
    :orientation "v"
    :space-evenly "false"
    (label
      :xalign 0 
      :markup "<span size='large' weight='bold'>Wallpaper</span>")
    (box 
      :class "wallpaperbox"
      :style 'background-image: url("${wallpaperpath}");'
      :height 196)
    (box 
      :halign "start"
      :orientation "h"
      (button 
        :class "widget"
        :style "margin-left: 0;"
        :onclick "${EWW_CMD} update wallpaperpath=$(zenity --file-selection --title 'Select Wallpaper' --file-filter='Image files (png, jpg) | *.png *.jpg *.jpeg') &"
        (label 
          :style "margin: 0 15px;"
          :markup "Select"))
      (button 
        :class "urgentwid"
        :style "margin-right: 0;"
        :onclick "./bin/wallset.sh set ${wallpaperpath}"
        (label 
          :markup "Apply")))))
      

(defwidget themecolors [] 
  (box 
    :orientation "v"
    :space-evenly false 
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Colors</span>")
    (box 
      :orientation "h"
      :space-evenly false 
      (box 
        :orientation "v"
        :hexpand true
        (combobox 
          :text {colorjson.key} 
          :items {presetcolorkeys}
          :onchange "./scripts/colormap.py update {}")
        (box
          :class "widget"
          :style "margin-left: 0px;"
          (input 
            :value {colorjson.val}
            :onaccept "./scripts/colormap.py set ${colorjson.key} '{}'")))
      (box
        :width 118 
        :class "colorbox"
        :style "background-color: ${colorjson.hex};"))))

(defwidget combobox [text items onchange]
  (box
    :class "widget"
    :style "margin-left: 0px;"
    (overlay 
      (combo-box-text 
        :items items 
        :onchange onchange)
      (label 
        :hexpand true 
        :xalign 0
        :class "solidlabelcover"
        :markup text))))

(defwidget themecolorpick [type]
  (box 
    :orientation "h"
    :space-evenly false 
    :spacing 10
    (color-button 
      :class "colorbox"
      :style "background-color: ${theme[type]};"
      :use-alpha false 
      :onchange "./scripts/themectl.py set_col ${type} '{}'")
    (label 
      :markup {type})))
    
