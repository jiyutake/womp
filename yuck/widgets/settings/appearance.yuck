(defvar themefiletmp "")

(defwidget themewid [] 
  (box 
    :class "widget transparent"
    :orientation "v"
    :space-evenly false 
    :spacing 10
    :hexpand true
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Theme</span>")
    (tailcont
      (label 
        :xalign 0
        :wrap true
        :markup "Selects a file from <span background='${theme.overlay}'>./themes/</span> and applies the colors from that file.")
      (box
        :orientation "h"
        :space-evenly false
        (combobox
          :text {theme.name}
          :items {presetthemes}
          :onchange "./bin/set_theme.sh {}")))
        ; (button 
        ;   :class "urgentwid"
        ;   :onclick {themefiletmp != "" ? "./bin/set_theme.sh ${themefiletmp}" : ""}
        ;   (label 
        ;     :style "margin: 0 15px;"
        ;     :markup "Reload"))))
    
    (label
      :xalign 0 
      :markup "<span size='large' weight='bold'>Wallpaper</span>")
    (wallwidget)
    (label 
      :xalign 0
      :markup "<span size='large' weight='bold'>Colors</span>")
    (themecolors)))

(defwidget wallwidget []
  (box 
    :orientation "v"
    :space-evenly "false"
    (tailcont
      (box 
        :class "wallpaperbox"
        :style 'background-image: url("${wallpaperpath}");'
        :height 175)
      (box
        :orientation "v"
        :space-evenly false
        :hexpand true
        (label
          :style "margin: 5px;"
          :markup "<b>${search(wallpaperpath, '[^\\/]+$')[0]}</b>")
        (box 
          :halign "center"
          :orientation "h"
          (button 
            :class "widget"
            :style "margin-left: 0;"
            :onclick "${EWW_CMD} update wallpaperpath=$(zenity --file-selection --title 'Select Wallpaper' --file-filter='Image files (png, jpg) | *.png *.jpg *.jpeg') &"
            (label 
              :style "margin: 0 15px;"
              :markup "Select"))
          (button 
            :class "urgentwid"
            :style "margin-right: 0;"
            :onclick "./bin/wallset.sh set ${wallpaperpath}"
            (label 
              :markup "Apply")))))))
      

(defwidget themecolors [] 
  (box 
    :orientation "v"
    :space-evenly false 
    (tailcont
      (box 
        :height 100
        :style "margin: -10px;"
        :orientation "h"
        :space-evenly false
        (box 
          :hexpand true
          :orientation "v"
          :space-evenly false
          (box 
            :orientation "h"
            (box 
              :class "colorswidbox bar"
              :style "background-color: ${theme.base};"
              (image 
                :image-width 25
                :path "./assets/icons/chevrondown.svg"))
            (box 
              :class "urgentwid red bar"
              (image 
                :image-width 25 
                :path "./assets/icons/linkw.svg")))
          (box 
            :vexpand true
            :class "colorswidbox bar"
            :style "background-color: ${theme.base};"
            (label 
              :text "text")))
        (box
          :hexpand true
          :orientation "v"
          :space-evenly false
          (button 
            :class "urgentwid bar"
            (label 
              :text "button"))

          (box 
            :orientation "h"
            :space-evenly false
            :vexpand true
            :class "colorswidbox bar"
            :style "background-color: ${theme.surface}; padding: 0;"
            (box 
              :width 30 
              :style "background-color: ${theme.base}; border-right: solid 1px ${theme.overlay}")
            (box 
              :hexpand true
              :class "widget"
              :style "background-color: ${theme.overlay};")))
              
            
        (box
          :orientation "h"
          :space-evenly false
          :vexpand true
          (box 
            :class "colorswidbox bar"
            :style "background-color: ${theme.surface};"
            (scroll
              :hscroll false 
              :vscroll true 
              :vexpand true 
              :active false
              (label 
                :angle 270
                :style "margin: 5px;"
                :text "Lorem ipsum dolor sit amet."))) 
          (box 
            :width 10 
            :style "
            background-color: ${theme.highlight}; 
            border-radius: 10px; 
            margin: 5px 5px 5px 0px;"
            (box 
              :style "
              background-color: ${theme.subtle};
              border-radius: 10px;
              margin-bottom: 80px;
              "))))
          
      (box 
        :orientation "h"
        :space-evenly false 
        :hexpand true
        (box 
          :orientation "v"
          :hexpand true
          (combobox 
            :text {colorjson.key} 
            :items {presetcolorkeys}
            :onchange "./scripts/colormap.py update {}")
          (box
            :class "widget"
            :style "margin-left: 0px;"
            (input 
              :value {colorjson.val}
              :onaccept "./scripts/colormap.py set ${colorjson.key} '{}'")))
        (box
          :width 118 
          :class "colorbox"
          :style "margin-right: 0px;"
          :style "background-color: ${colorjson.hex};")))))

(defwidget combobox [text items onchange]
  (box
    :class "widget"
    :style "margin-left: 0px;"
    (overlay 
      (combo-box-text 
        :items items 
        :onchange onchange)
      (label 
        :hexpand true 
        :xalign 0
        :class "solidlabelcover"
        :markup text))))

(defwidget themecolorpick [type]
  (box 
    :orientation "h"
    :space-evenly false 
    :spacing 10
    (color-button 
      :class "colorbox"
      :style "background-color: ${theme[type]};"
      :use-alpha false 
      :onchange "./scripts/themectl.py set_col ${type} '{}'")
    (label 
      :markup {type})))
